(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     51456,        998]
NotebookOptionsPosition[     50928,        981]
NotebookOutlinePosition[     51271,        996]
CellTagsIndexPosition[     51228,        993]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[BoxData[{
 RowBox[{
  RowBox[{"SetDirectory", "[", 
   RowBox[{"FileNameJoin", "@", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"ParentDirectory", "[", 
       RowBox[{"NotebookDirectory", "[", "]"}], "]"}], ",", 
      "\"\<Shared\>\""}], "}"}]}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Needs", "[", "\"\<gPlots3DEx`\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Needs", "[", "\"\<gPlotsEx`\>\"", "]"}], ";"}], 
  " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Needs", "[", "\"\<gBRDF`\>\"", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Needs", "[", "\"\<gUtils`\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Needs", "[", "\"\<pbrtPath`\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"SetDirectory", "[", 
    RowBox[{"NotebookDirectory", "[", "]"}], "]"}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ClearAll", "[", 
    RowBox[{
    "pbrtGetPixelIndex", ",", "pathCalcL", ",", "pathPlotScene", ",", 
     "pathValidatePixel", ",", "pathValidateScene", ",", "testData", ",", 
     "debugPixel"}], "]"}], ";"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{"CPathExporter", "::", "rtGetPixelIndex"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"pbrtGetPixelIndex", "[", 
     RowBox[{"pixel_", ",", "resx_"}], "]"}], ":=", 
    RowBox[{"Module", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"px", ",", "py", ",", "index"}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"px", "=", 
        RowBox[{"pixel", "[", 
         RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"py", "=", 
        RowBox[{"pixel", "[", 
         RowBox[{"[", "2", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"index", "=", 
        RowBox[{"px", "+", 
         RowBox[{"py", "*", "resx"}]}]}], ";", "\[IndentingNewLine]", 
       "index"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{"p863", ",", " ", 
    RowBox[{"eq", "~", "14.13"}]}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"pathCalcL", "[", "pixelPath_", "]"}], ":=", 
    RowBox[{"Module", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "firstLe", ",", "bounceIndex", ",", "bounceData", ",", "beta", ",", 
        "li", ",", "l"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"li", "=", 
        RowBox[{"{", 
         RowBox[{"0", ",", "0", ",", "0"}], "}"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"beta", "=", 
        RowBox[{"{", 
         RowBox[{"1", ",", "1", ",", "1"}], "}"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"For", "[", 
        RowBox[{
         RowBox[{"bounceIndex", "=", "0"}], ",", 
         RowBox[{"bounceIndex", "<", "3"}], ",", 
         RowBox[{"bounceIndex", "++"}], ",", "\[IndentingNewLine]", "\t", 
         RowBox[{
          RowBox[{"bounceData", "=", 
           RowBox[{"pixelPath", "[", "bounceIndex", "]"}]}], ";", 
          "\[IndentingNewLine]", "\t", 
          RowBox[{"li", "+=", 
           RowBox[{"beta", "*", 
            RowBox[{"bounceData", "[", "\"\<ld\>\"", "]"}]}]}], ";", 
          "\[IndentingNewLine]", "\t", 
          RowBox[{"beta", "*=", 
           RowBox[{
            RowBox[{"bounceData", "[", "\"\<f\>\"", "]"}], "*", 
            RowBox[{
             RowBox[{"bounceData", "[", "\"\<cos\>\"", "]"}], "/", 
             RowBox[{"bounceData", "[", "\"\<pdf\>\"", "]"}]}]}]}], ";"}]}], 
        "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"firstLe", "=", 
        RowBox[{"pixelPath", "[", "\"\<le\>\"", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"l", "=", 
        RowBox[{"firstLe", " ", "+", " ", "li"}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", "l"}]}], 
     "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"pathValidatePixel", "[", 
     RowBox[{"pixel_", ",", "testData_"}], "]"}], ":=", 
    RowBox[{"Module", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "keys", ",", "pixelIndex", ",", "pixelPath", ",", "l1", ",", "l2"}], 
       "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"pixelIndex", "=", 
        RowBox[{"pbrtGetPixelIndex", "[", 
         RowBox[{"pixel", ",", 
          RowBox[{"testData", "[", "\"\<resx\>\"", "]"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"keys", "=", 
        RowBox[{"Keys", "[", "testData", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"!", 
          RowBox[{"MemberQ", "[", 
           RowBox[{"keys", ",", "pixelIndex"}], "]"}]}], ",", 
         RowBox[{"Return", "[", "\"\<no pixel in file\>\"", "]"}]}], "]"}], 
       ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"pixelPath", "=", 
        RowBox[{
         RowBox[{"testData", "[", "pixelIndex", "]"}], "[", 
         RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"l1", "=", 
        RowBox[{"pathCalcL", "[", "pixelPath", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"l2", "=", 
        RowBox[{"pixelPath", "[", "\"\<l\>\"", "]"}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"gColorEquals", "[", 
          RowBox[{"l1", ",", "l2"}], "]"}], ",", "l1", ",", "l2"}], "}"}]}]}],
      "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"pathValidateScene", "[", "testData_", "]"}], ":=", 
    RowBox[{"Module", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "resx", ",", "resy", ",", "keys", ",", "i", ",", "j", ",", "pixel", 
        ",", "pixelIndex", ",", "stats", ",", "bok"}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"resx", "=", 
        RowBox[{"testData", "[", "\"\<resx\>\"", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"resy", "=", 
        RowBox[{"testData", "[", "\"\<resy\>\"", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"keys", "=", 
        RowBox[{"Keys", "[", "testData", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"stats", "=", 
        RowBox[{"<|", 
         RowBox[{
          RowBox[{"\"\<total\>\"", "\[Rule]", "0"}], ",", 
          RowBox[{"\"\<fails\>\"", "\[Rule]", "0"}], ",", 
          RowBox[{"\"\<aFail\>\"", "\[Rule]", "\"\<\>\""}]}], "|>"}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"For", "[", 
        RowBox[{
         RowBox[{"i", "=", "0"}], ",", 
         RowBox[{"i", "<", "resx"}], ",", 
         RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"For", "[", 
           RowBox[{
            RowBox[{"j", "=", "0"}], ",", 
            RowBox[{"j", "<", "resy"}], ",", 
            RowBox[{"j", "++"}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"pixel", "=", 
              RowBox[{"{", 
               RowBox[{"i", ",", "j"}], "}"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"pixelIndex", "=", 
              RowBox[{"pbrtGetPixelIndex", "[", 
               RowBox[{"pixel", ",", "resx"}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"!", 
                RowBox[{"MemberQ", "[", 
                 RowBox[{"keys", ",", "pixelIndex"}], "]"}]}], ",", 
               RowBox[{"Continue", "[", "]"}]}], "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"stats", "[", "\"\<total\>\"", "]"}], "+=", "1"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"bok", "=", 
              RowBox[{
               RowBox[{"rtPathValidatePixel", "[", 
                RowBox[{"pixel", ",", "testData"}], "]"}], "[", 
               RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"!", "bok"}], ",", 
               RowBox[{
                RowBox[{
                 RowBox[{"stats", "[", "\"\<fails\>\"", "]"}], "+=", "1"}], 
                ";", 
                RowBox[{
                 RowBox[{"stats", "[", "\"\<aFail\>\"", "]"}], "=", "pixel"}],
                 ";"}]}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
          ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", "stats"}]}], "\[IndentingNewLine]", "]"}]}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"pathPlotScene", "[", 
     RowBox[{"testData_", ",", "colorMul_"}], "]"}], ":=", 
    RowBox[{"Module", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "keys", ",", "resx", ",", "resy", ",", "imgTable", ",", "i", ",", "j", 
        ",", "pixel", ",", "pixelIndex", ",", "pixelPath"}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"resx", "=", 
        RowBox[{"testData", "[", "\"\<resx\>\"", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"resy", "=", 
        RowBox[{"testData", "[", "\"\<resy\>\"", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"keys", "=", 
        RowBox[{"Keys", "[", "testData", "]"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"imgTable", "=", 
        RowBox[{"Table", "[", 
         RowBox[{"1", ",", "resx", ",", "resy"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"For", "[", 
        RowBox[{
         RowBox[{"i", "=", "1"}], ",", 
         RowBox[{"i", "<=", "resx"}], ",", 
         RowBox[{"i", "++"}], ",", "\n", "\t\t", 
         RowBox[{
          RowBox[{"For", "[", 
           RowBox[{
            RowBox[{"j", "=", "1"}], ",", 
            RowBox[{"j", "<=", "resy"}], ",", 
            RowBox[{"j", "++"}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"pixel", "=", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"j", "-", "1"}], ",", 
                RowBox[{"i", "-", "1"}]}], "}"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"pixelIndex", "=", 
              RowBox[{"pbrtGetPixelIndex", "[", 
               RowBox[{"pixel", ",", "resx"}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
               RowBox[{"imgTable", "[", 
                RowBox[{"[", "i", "]"}], "]"}], "[", 
               RowBox[{"[", "j", "]"}], "]"}], "=", 
              RowBox[{"RGBColor", "[", 
               RowBox[{"0", ",", "0", ",", "0"}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"!", 
                RowBox[{"MemberQ", "[", 
                 RowBox[{"keys", ",", "pixelIndex"}], "]"}]}], ",", 
               RowBox[{"Continue", "[", "]"}]}], "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"pixelPath", "=", 
              RowBox[{
               RowBox[{"testData", "[", "pixelIndex", "]"}], "[", 
               RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
               RowBox[{"imgTable", "[", 
                RowBox[{"[", "i", "]"}], "]"}], "[", 
               RowBox[{"[", "j", "]"}], "]"}], "=", 
              RowBox[{"RGBColor", "[", 
               RowBox[{
                RowBox[{"pixelPath", "[", "\"\<l\>\"", "]"}], "*", 
                "colorMul"}], "]"}]}], ";"}]}], "\n", "\t\t", "]"}], ";"}]}], 
        "\n", "\t", "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"Show", "[", 
        RowBox[{"ArrayPlot", "[", "imgTable", "]"}], "]"}]}]}], 
     "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"debugPixel", "=", 
   RowBox[{"{", 
    RowBox[{"58", ",", "10"}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"testData", "=", 
   RowBox[{"ToExpression", "[", 
    RowBox[{"Import", "[", "\"\<cornell-tiny.path\>\"", "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"pathValidatePixel", "[", 
   RowBox[{"debugPixel", ",", "testData"}], "]"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{"pathValidateScene", "[", "testData", "]"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{"pathPlotScene", "[", 
  RowBox[{"testData", ",", "10"}], "]"}]}], "Input",
 CellChangeTimes->{{3.84078508089666*^9, 
  3.840785241887511*^9}},ExpressionUUID->"8413a7a4-63af-48fb-bd0f-\
1ae6b1a8f312"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"True", ",", 
   RowBox[{"{", 
    RowBox[{
    "22.524349938166495`", ",", "11.203504022347618`", ",", 
     "2.788321306521488`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"22.5243530273`", ",", "11.2035045624`", ",", "2.7883212566`"}], 
    "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.8407784357542667`*^9, {3.8407850750952168`*^9, 3.8407850825053587`*^9}, 
   3.840785174492034*^9, 3.840785231552659*^9},
 CellLabel->
  "Out[3632]=",ExpressionUUID->"68b88659-0eda-41ad-829c-9f9033cd7aac"],

Cell[BoxData[
 GraphicsBox[RasterBox[CompressedData["
1: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
V3/XBFujIMuXu3Lxo06RTtO0H1fl3ktNfnoI7S+Rr5f1ueJ4xFhZ0MgA6puS
xibjovBQRslmW+t1fG79UPyhcQgO/heVN0THQEb+VOKlIXdwSRyUTD9Si2GI
PYtK98dMWodp0nErmEgb71g+VguhcwmTNy8HYOLIanLiRmvoDC8ZJ7kOYbbu
+5UXZjGwq702tzHHHUL+cgLHjIaw5isX7/5NMfCNazjx7qo7ij51ibel1sE5
8ccGyzOBSLginpW/8Txs/CcpBZtrwRH/6L6+lz92WmTx9YhYEfvD2W3XRhrj
MVe67VOTrxfWtnW+6wuuhbpk24nJGX8wnltxb1+iFRKfXLCy460D+d1Se4Gk
AFy+EP8k1sAaIz9Hb09trkF/p/kRzz1+qJTtrZL7akHzLho0/gUoo1Y73VEd
w+73WvYPIpuR5e7rbMxCfG6bT96hfFlYLwRz9PbFLlovSMWbI575UtGF2bDW
LYt8wGGtQe1OKqI2pqSvf0usp+ytT8rImRTUnmu3qvpDrF8Vk9vZDRfW/YNr
PlumL/o9MtfbGs5LWakw7srl7jZctK/F0xZ+kocKwzS3sHUXiPwKfUnVm33t
eFLKl/M+mljvbHewHTe+RsWL+JkhVSGif5n8x3sHZ6jQ1Xm5Rf8hkd+21JRw
J5FBL27yq1SOeLyJLHdxVoyMWY7+j/F+xDqlX/ZjVs6UilH973df0S/a/wnZ
Jhl6noqPOvWZVeyL/CRz2iNqkgqHl19kXj9Y9P0ArCrx+antqLua1O5Ct+j3
xWb4tYUW5icJfpP/s4aol+qcWjGaTUWKCdesux6RnygL4r8vT4FQA9/bU96L
fGlvDoJnKLiXSbIb2r3oulXJ70uJzlTcbevwubvovqO465Tw9EtUuG5d1a+3
6DppWKSY/IPtVKx5tCO/rJLo81R2iwHTDgq+3zjv9fgGcdxE547d9xZ8OKOZ
5VfbMqLPx0dHqpu9KIiMLlcc/ErU9/adi2CobYdCwl1lukW/NzdAZhJYlrPw
Oqx5CRIvcX7FK0KVsla1Ib6fTdnnEnG+bjtNe4QdasfNJmPlgHiinuXXUZJG
PhkaFs9HlXmJ+idhwX3GFDKW9Ut4uWwn8oqUYg+7IDKimbo/2fcR551DzTZ+
dicZI4mnPqVHE7lalB+pdBkFkiSOu64nifmDmp1y97K0wa5HMt/ZvBAPK1bI
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
1ouf/2cfqUjqdf1HagK2HsyU137sjS19fGnxC351oCa8YvWCX50uuf5Rc8Gv
zPiqy05+q8fF2XSDp99uwNLtZ3p2tQ2SuSfDN+wj4cWNdStqeW+hQPHg6uci
9vD3MTa9s4wEtTcMuofKQ8AT3M64fdQOFK3JgKyvJBiRl8ayFtxCIUNVRYaz
PQzJ+Zzv15PAs0rvm2ZvCMhKGT5bme2hnv5cJ+QxCRGhoTMHAm/hBP+OUpbT
9rjnclO/yKIZtbgXEud0G6fnk08fb7eHnvAkpbG4Acm2qcuufgvCuf3lpj87
bWF4em+gaE4jblYXpdxbH4zNd8aleTfT9qlo0KBBgwYNGnR0apurc2OYa2A1
ImGWLeAHK48tVYi1gPLWFdQ1TX0QeSpB2hL7EKOh7g2XvroiiVWpJJpjGL6s
QiLLfsXg4mkpI+5jHvjpupHOkmUEmZMGT28wxeH18ptfYxWJ63cWtR+myLsS
ELG53qmJ1RtPnqiUWDweg/P5AfPcn/GwehPLcLLQCzzzqhHVS0iIbOmzufJ/
tXff0Vz////HScnIqIgmRaVoSEaSm1WpVNpDSlH23ntvZb3sTaXS0NQkokjv
kL13FKIlUfze3985X/75fc7n/D7n8zmfdb/88zzncZzn6/nn9TweD4/Hs/Pg
5HkuGt9hDkdBZaZf0vX4ruRkJ7c5FEEFruVfnllgw41ud9YTf3bXo8YNMmsu
oPLTG27pNRZIEFdni+ZtwPSvvatZlodBzu2xwJK9lrA6fkqJXboOLlzDuh9+
ncfqoQKG5lyLqfMiprGOHDmSDla24HXuq73x9IT1et3oWpjnmQfoyJ2Hc8qi
2L4D5tjh0b5ORbof+jJHy8+6JaMgkV/Ld8gdT0OtmRKrqzGu0fvJdFYwvLan
y7ZOmFB3EUIIIf9FPpdo6+jOKUVD0zDPnUIP6Lz6uX3f6GkcFwlNsNpRgUMW
C8pVjHwxO3U6263v5+AZelpwZWU1nsqoXTvDHoxle1PqEn6ZIFGOp+24ZT94
DZRnxd9Lxu35yefi53qAc4XrlaqyWiwJ1S4KdD+Pe7VvjGVSzRHraTOiGF6P
UcGrHtuuh0Ij/23d+dGpznG525DTF5iOVVKDXu9Oe0+Od85sWFV0LQNcm0/O
ZoT4oCLXeD0HZwOe2/cURS4Ng1rfRj7zXZY4V71WKUetHtu6xD/Y7w5F73np
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
   "], {{0, 0}, {100, 100}}, {0, 1}],
  Frame->Automatic,
  FrameLabel->{None, None},
  FrameTicks->{{None, None}, {None, None}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultPlotStyle" -> 
    Automatic}]], "Output",
 CellChangeTimes->{
  3.8407784357542667`*^9, {3.8407850750952168`*^9, 3.8407850825053587`*^9}, 
   3.840785174492034*^9, 3.8407852325590105`*^9},
 CellLabel->
  "Out[3633]=",ExpressionUUID->"08d6f0c6-73b0-4d01-8512-61299bdb4125"]
}, Open  ]]
},
WindowSize->{754, 704},
WindowMargins->{{251, Automatic}, {33, Automatic}},
FrontEndVersion->"12.0 for Microsoft Windows (64-bit) (April 8, 2019)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 13213, 331, 1910, "Input",ExpressionUUID->"8413a7a4-63af-48fb-bd0f-1ae6b1a8f312"],
Cell[13796, 355, 540, 14, 32, "Output",ExpressionUUID->"68b88659-0eda-41ad-829c-9f9033cd7aac"],
Cell[14339, 371, 36573, 607, 376, "Output",ExpressionUUID->"08d6f0c6-73b0-4d01-8512-61299bdb4125"]
}, Open  ]]
}
]
*)

